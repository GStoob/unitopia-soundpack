<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sonntag, Mai 24, 2020, 9:18 AM -->
<!-- MuClient version 5.05 -->

<!-- Plugin "GMCP" generated by Plugin Wizard -->

<muclient>
<plugin
   name="GMCP"
   author="FrankieT"
   id="c074220f28dcae21baaf08e6"
   language="Lua"
   purpose="Enables Generic MUD Communication Protocol."
   date_written="2020-05-24 09:16:03"
   requires="5.05"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<!--  Triggers  -->

<triggers>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
    match="^//gmcpdebug$"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
    send_to="12"
  >
  <send>
    if (GmcpFramework:IsLogOutputEnabled()) then
      GmcpFramework:DisableLogOutput()
    else
      GmcpFramework:EnableLogOutput()
    end
    if (IsDebugging) then
      IsDebugging = false
      world.Note("Debugging disabled")
    else
      IsDebugging = true
      world.Note("Debugging enabled")
    end
  </send>
  </alias>
  <alias
    match="^//gmcpregister all$"
    regexp="y"
    enabled="y"
    sequence="100"
    send_to="12"
  >
  <send>RegisterModules()</send>
  </alias>
  <alias
    match="//gmcpsend *"
    enabled="y"
    sequence="100"
    send_to="12"
  >
  <send>
    local wildcards = '%1'
    if (IsDebugging) then world.Note("Sending GMCP request...") end
    SendGmcpData(wildcards)
  </send>
  </alias>
</aliases>

<!--  Script  -->

<script>
require("unitopia.gmcp-framework")
require("json")
Constants = require("unitopia.constants")
PPI = require("ppi")
GmcpFramework = GmcpFramework()
IsDebugging = false

SupportedGmcpModules = {
  "Char 1",
  "Char.Vitals 1",
  "Char.Items 1",
  "Comm 1",
  "Files 1",
  "Playermap 1",
  "Sound 1",
  "Room 1"
}

function OnPluginInstall()
  PPI.Expose("Listen", AddListener)
  PPI.Expose("Unlisten", RemoveListener)
  PPI.Expose("RegisterModules", RegisterModules)
  
  PPI.Expose("GetById", function(id)
    return GmcpFramework:GetById(id)
    end)
end

function OnPluginTelnetRequest (type, data)
  if (type == Constants.GmcpProtocolNegotiation.GMCP) then
    if (data == "DO") then
      return true
    elseif (data == "WILL") then
      return true
    elseif (data == "SEND_DO") then
      local clientInfo = { client = "MUSHclient", version = world.Version() }

      -- Establish handshake
      local handshakeRequest = "Core.Hello " .. json.encode(clientInfo)
      SendGmcpData(handshakeRequest)
    return true
    end  
  end
  return false
end

function OnPluginTelnetSubnegotiation(type, data)
  if (type ~= Constants.GmcpProtocolNegotiation.GMCP) then
    return
  end

  if (IsDebugging) then
    world.Note("OnPluginTelnetSubnegotiation: Received GMCP data...")
  end
  GmcpFramework:ParseRawData(data)
end

function AddListener(event, callback)
  return GmcpFramework:AddListener(event, callback)
end

function RemoveListener(event, callback)
  return GmcpFramework:RemoveListener(event, callback)
end

function RegisterModules()
  local moduleRequest = "Core.Supports.Set " .. json.encode(SupportedGmcpModules)

  if (IsDebugging) then world.Note("Registering supported GMCP modules...") end

        SendGmcpData(moduleRequest)
end

function SendGmcpData(data)
  return GmcpFramework:SendGmcpPacket(data)
end
</script>
</muclient>
