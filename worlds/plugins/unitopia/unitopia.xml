<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sonntag, Mai 17, 2020, 3:19 PM -->
<!-- MuClient version 5.05 -->

<!-- Plugin "unitopia" generated by Plugin Wizard -->

<muclient>
<plugin
   name="unitopia"
   author="FrankieT, Arija"
   id="32f743256f9d2090ecfef8aa"
   language="Lua"
   purpose="UNItopia MUSHclient Soundpack"
   date_written="2020-05-17 15:18:42"
      save_state="n"
   requires="5.05"
   version="1.0"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
  enabled="y"
  match="*fragt:*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/Say.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*spricht zu*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/FriendSpeech.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*sagt:*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/Say.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*fragt dich:*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/Say.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*sagt zu*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/Say.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*hinaus in die LÃ¼fte zu tragen.*"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="*redet zu*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/Speech.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*schwirrt heran und*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/Kuscheli.ogg")</send>
  </trigger>
  <trigger
  match="*Gastfreundschaft*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/FriendSpeech.ogg")</send>
  </trigger>
  <trigger
  match="*teilt dir*"
  send_to="12"
  sequence="100"
  >
  <send>PlaySound("Com/GuildSpeech.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="Auf der Roemerstrasse IV.*"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf der Roemerstrasse V."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf der Roemerstrasse VII."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf einem Pfad im Maerchenland."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf einem Pfad."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf einem Weg."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf einem schmalen Pfad."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="Auf einer neu ausgebauten Strasse."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
  match="Ein Weg in einer Steppenlandschaft."
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="*sich wieder erholt und*"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Angel/WingReg.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*sich deutlich auf deine Ausdauer nieder.*"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="*hinaus in die*"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  </trigger>
  <trigger
  enabled="y"
  match="*sehen erholungs*"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Angel/WingDown.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*Sie sehen recht frisch und fit*"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Angel/WingUp.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*doch etwas besser schonen sollen*"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Angel/WingError.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="Das oktarine Leuchten des Magystrons erfrischt dich."
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Misc/Reg.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*Die Kraft der Eiche*"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Misc/Reg.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*wie eine starke, dunkle Macht dich*"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Misc/Reg.ogg")</send>
  </trigger>
  <trigger
  enabled="y"
  match="*Endlich hast du mal wieder Zeit, deinem Geist freien *"
  send_to="12"
  omit_from_log="y"
  omit_from_output="y"
  sequence="100"
  >
  <send>PlaySound("Misc/Reg.ogg")</send>
  </trigger>

</triggers>

<!--  Aliases  -->

<aliases>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require("unitopia.configuration-manager")
require("unitopia.audio-system")
require("unitopia.plugin-manager")
require("pl.class")

Path = require("pl.path")
CONFIG_FILE_NAME = "settings.dat"
PLUGIN_DIRECTORY = world.GetInfo(60) -- Points to worlds/plugins

CurrentArea = ""
CurrentMusic = ""

Audio = AudioSystem()
PluginManager = PluginManager()
ConfigurationManager = ConfigurationManager()

-- The following are the user specific settings. The tables hold default values, so that a valid settings file can be generated on the first soundpack start
UserConfig = {}
UserConfig.Settings = {}
UserConfig.Settings.ScreenReaderPlugin = "MushReader"
UserConfig.Settings.SoundVolume = 20
UserConfig.Settings.AreaVolume = 15
UserConfig.Settings.MusicVolume = 10
UserConfig.Settings.SoundsMuted = 0
UserConfig.Settings.AreaMuted = 0
UserConfig.Settings.MusicMuted = 0

function OnPluginInstall()
  -- Initialize all required plugins
  PluginManager:AddPlugin("LuaAudio.xml")
  PluginManager:AddPlugin("output_functions.xml")
  PluginManager:AddPlugin("omit_blank_lines.xml")
  PluginManager:AddPlugin("channel_history.xml")
  PluginManager:AddPlugin(UserConfig.Settings.ScreenReaderPlugin..".xml")

  PluginManager:LoadPlugins(PLUGIN_DIRECTORY)

  -- Check if this is the first soundpack start. This is done by checking whether the settings file exists or not.
  if (IsFirstSoundpackStart()) then
    world.Note("Anscheinend wird das Soundpack zum ersten mal gestartet. Generiere benutzerspezivische Einstellungsdatei...")
    ConfigurationManager:SaveUserConfig(CONFIG_FILE_NAME)
    world.Note("Einstellungsdatei generiert. Viel Spass mit dem UNItopia Soundpack!")
  else
    UserConfig = ConfigurationManager:LoadUserConfig(CONFIG_FILE_NAME)
    world.Note("Einstellungen geladen.")
  end

  -- Now, initialize the audio output plugin
  Audio:InitializeLuaAudio()
end

function OnPluginConnect()
  PlaySound("Misc/SoundpackStart.ogg")
  InitializeHotkeys()
  InitializeNumPad()
end

function OnPluginDisconnect()
  PlaySound("Misc/Exit.ogg")
  ConfigurationManager:SaveUserConfig(CONFIG_FILE_NAME)
  world.Note("Einstellungen gespeichert.")
  PluginManager:UnloadPlugins(PLUGIN_DIRECTORY)
end

function IsFirstSoundpackStart()
  if (not Path.exists(CONFIG_FILE_NAME)) then 
    return true 
  end
  return false
  end

function PlaySound(sound, volume, panning)
  volume = volume or UserConfig.Settings.SoundVolume
  panning = panning or 0

  return Audio:Play(sound, volume, panning, UserConfig.Settings.SoundsMuted)
end

function PlayLoopedSound(sound, volume, panning)
  volume = volume or UserConfig.Settings.SoundVolume
  panning = panning or 0

  return Audio:PlayLooped(sound, volume, panning, UserConfig.Settings.SoundMuted)
end

function PlayAmbienceLoop(areaName, sound, volume)
  volume = volume or UserConfig.Settings.AreaVolume

  -- TODO: Define a useful logic here to determine the current area for which we should play back the ambience sound
  -- My idea is to have a list with all the areas defined, through which we can iterate here
  -- Or perhaps, if we can read this info out using the GMCP protocol we might not even require a table with all the possible areas.

  if (CurrentArea == areaName) then return 0 end  

  CurrentArea = areaName
  return Audio:PlayAreaAmbience(sound, volume, 0, UserConfig.Settings.AreaMuted)
end

function PlayMusic(areaName, musicFile, volume)
  volume = volume or UserConfig.Settings.MusicVolume

  -- TODO: Define a useful logic here to determine the current area for which we should play back the music
  -- My idea is to have a list with all the areas defined, through which we can iterate here
  -- Or perhaps, if we can read this info out using the GMCP protocol we might not even require a table with all the possible areas.

  if (CurrentMusic == areaName) then return 0 end

  CurrentMusic = areaName
  return Audio:PlayMusic(musicFile, volume, 0, UserConfig.Settings.MusicMuted)
end

function SetSoundVolume(increment)
  if (UserConfig.Settings.SoundVolume + increment <= 100) and (UserConfig.Settings.SoundVolume + increment >= 0) then
    UserConfig.Settings.SoundVolume = UserConfig.Settings.SoundVolume + increment
    PlaySound("Misc/Switch.ogg")
    world.Note("Lautstaerke fuer Sounds: "..tostring(UserConfig.Settings.SoundVolume).."%.")
  else
    if (UserConfig.Settings.SoundVolume + increment > 100) then
      world.Note("Das Maximum fuer die Sound-Lautstaerke wurde erreicht.")
    elseif (UserConfig.Settings.SoundVolume + increment < 0) then
    world.Note("Das Minimum fuer die Sound-Lautstaerke wurde erreicht.")
    end
    PlaySound("Misc/Error.ogg")
  end
end

function SetAmbienceVolume(increment)
  if (UserConfig.Settings.AreaVolume + increment <= 100) and (UserConfig.Settings.AreaVolume + increment >= 0) then
    UserConfig.Settings.AreaVolume = UserConfig.Settings.AreaVolume + increment
    PlaySound("Misc/Switch.ogg")
    world.Note("Lautstaerke fuer Umgebung: "..tostring(UserConfig.Settings.AreaVolume).."%.")

    local ambience = Audio:GetCurrentAmbienceSoundHandle()

    if (tonumber(ambience) ~= nil) and (Audio:IsPlaying(ambience)) then
      Audio:SetVolume(UserConfig.Settings.AreaVolume, ambience)
    end
  else
    if (UserConfig.Settings.AreaVolume + increment > 100) then
      world.Note("Das Maximum fÃ¼r die Umgebungs-Lautstaerke wurde erreicht.")
    elseif (UserConfig.Settings.AreaVolume + increment < 0) then
    world.Note("Das Minimum fÃ¼r die Umgebungs-Lautstaerke wurde erreicht.")
    end
    PlaySound("Misc/Error.ogg")
  end
end

function SetMusicVolume(increment)
  if (UserConfig.Settings.MusicVolume + increment <= 100) and (UserConfig.Settings.MusicVolume + increment >= 0) then
    UserConfig.Settings.MusicVolume = UserConfig.Settings.MusicVolume + increment
    PlaySound("Misc/Switch.ogg")
    world.Note("Lautstaerke fuer Hintergrundmusik: "..tostring(UserConfig.Settings.MusicVolume).."%.")

    local music = Audio:GetCurrentMusicSoundHandle()

    if (tonumber(music) ~= nil) and (Audio:IsPlaying(music)) then
    Audio:SetVolume(UserConfig.Settings.MusicVolume, music)
    end
  else
    if (UserConfig.Settings.MusicVolume + increment > 100) then
      world.Note("Das Maximum fuer die Hintergrundmusik-Lautstaerke wurde erreicht.")
    elseif (UserConfig.Settings.MusicVolume + increment < 0) then
    world.Note("Das Minimum fuer die Hintergrundmusik-Lautstaerke wurde erreicht.")
    end
    PlaySound("Misc/Error.ogg")
  end
end

function ToggleMute()
  local ambience = Audio:GetCurrentAmbienceSoundHandle()
  local music = Audio:GetCurrentMusicSoundHandle()

  if (UserConfig.Settings.SoundsMuted == 0) and (UserConfig.Settings.AreaMuted == 0) and (UserConfig.Settings.MusicMuted == 0) then
    PlaySound("Misc/Switch.ogg")
    UserConfig.Settings.SoundsMuted = 1
    UserConfig.Settings.AreaMuted = 1
    UserConfig.Settings.MusicMuted = 1

    if (tonumber(ambience) ~= nil) then
      Audio:Stop(ambience)
    end
    if (tonumber(music) ~= nil) then
      Audio:Stop(music)
    end
    world.Note("Soundpack komplett stummgeschaltet.")
  else
    UserConfig.Settings.SoundsMuted = 0
    UserConfig.Settings.AreaMuted = 0
    UserConfig.Settings.MusicMuted = 0
    world.Note("Stummschaltung aufgehoben.")
    PlaySound("Misc/Switch.ogg")
  end
end

function InitializeHotkeys()
  -- Volume
  world.AcceleratorTo("F9", "SetSoundVolume(-5)", sendto.script)
  world.AcceleratorTo("F10", "SetSoundVolume(5)", sendto.script)
  world.AcceleratorTo("ctrl+F9", "SetAmbienceVolume(-5)", sendto.script)
  world.AcceleratorTo("ctrl+F10", "SetAmbienceVolume(5)", sendto.script)
    world.AcceleratorTo("ctrl+shift+F9", "SetMusicVolume(-5)", sendto.script)
  world.AcceleratorTo("ctrl+shift+F10", "SetMusicVolume(5)", sendto.script)
  world.AcceleratorTo("F11", "ToggleMute()", sendto.script)
end

function InitializeNumPad()
  world.Accelerator('Numpad1', 'sw')
  world.Accelerator('Numpad2', 's')
  world.Accelerator('Numpad3', 'so')
  world.Accelerator('Numpad4', 'w')
  world.Accelerator('Numpad6', 'o')
  world.Accelerator('Numpad7', 'nw')
  world.Accelerator('Numpad8', 'n')
  world.AcceleratorTo('Numpad9','send_command("no")', sendto.script)
  world.Accelerator('Add', 'r')
  world.Accelerator('Subtract', 'h')
end
]]>
</script>
</muclient>
